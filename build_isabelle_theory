#!/usr/bin/env xonsh

$RAISE_SUBPROC_ERROR = True

import json
import argparse
import yaml
import re
from os import listdir
from os import path
from sys import exit
from datetime import datetime

p = argparse.ArgumentParser()
p.add_argument('isabelle_version')
p.add_argument('root_dir')
p.add_argument('session_name')
p.add_argument('dependencies')
p.add_argument('custom_archive')
p.add_argument('report_url')
p.add_argument('report_secret')
p.add_argument('--projname')
a = p.parse_args()

thisprog = $ARG0
$projname = $(basename $(pwd)).strip()
if a.projname:
    $projname = a.projname
$projdir = a.projname or ''
isa_ver = a.isabelle_version
$rootdir = a.root_dir
if $rootdir.strip() == '':
    $rootdir = '.'
$session = a.session_name
deplist = a.dependencies
build_ver = path.split($GITHUB_ACTION_PATH[0])[-1]

$custom = a.custom_archive.strip()

$report_url = a.report_url
$report_secret = a.report_secret
    

if $session == "":
    $session = $projname

if isa_ver == "2021-1":
    if not path.isdir('Isabelle2021-1'):
        if $custom == '':
            echo "Fetching Isabelle:"
            # The SEL4 mirror of the isabelle mercurial is actually the most convenient way to get isabelle, surprisingly
            wget -nv -O archive https://github.com/seL4/isabelle/archive/refs/tags/Isabelle2021-1.zip
        else:
            echo "Fetching custom Isabelle distribution from $custom"
            wget -nv -O archive $custom
        aunpack archive -X Isabelle2021-1
        n = $(ls Isabelle2021-1 | wc -l)
        if int(n.strip()) == 1:
            mv Isabelle2021-1 isa_tmp
            mv isa_tmp/* Isabelle2021-1
        pushd Isabelle2021-1 > /dev/null
        sudo apt-get update
        sudo apt-get install -y default-jdk haskell-stack
        $ISABELLE_STACK = $(which stack)
        $JAVA_HOME = $(dirname $(dirname $(readlink -f $(which javac))))
        ./bin/isabelle components -I
        ./bin/isabelle components -a
        ./bin/isabelle ghc_setup
        popd > /dev/null
    pushd Isabelle2021-1 > /dev/null
    $isa_base=$(pwd).strip()
    popd > /dev/null
elif isa_ver == "2022":
    if not path.isdir('Isabelle2022'):
        # TODO this will break on the next release, fix up these links, and the setup process ... grrr
        if $custom == '':
            echo "Fetching Isabelle:"
            wget -nv -O - https://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/Isabelle2022_linux.tar.gz | tar -xzf -
        else:
            echo "Fetching custom Isabelle distribution from $custom"
            wget -nv -O custom_archive $custom
            aunpack custom_archive -X Isabelle2022
            n = $(ls Isabelle2022 | wc -l)
            if int(n.strip()) == 1:
                mv Isabelle2022 isa_tmp
                mv isa_tmp/* Isabelle2022
            pushd Isabelle2022 > /dev/null
            sudo apt-get update
            sudo apt-get install -y default-jdk haskell-stack
            $ISABELLE_STACK = $(which stack)
            $JAVA_HOME = $(dirname $(dirname $(readlink -f $(which javac))))
            ./bin/isabelle components -I
            ./bin/isabelle components -a
            ./bin/isabelle ghc_setup
            popd > /dev/null
    pushd Isabelle2022 > /dev/null
    $isa_base=$(pwd).strip()
    popd > /dev/null
else:
    echo f"Unknown Isabelle version `{isa_ver}`."
    exit(1)

echo "Checking for dependencies..."
deplist = [a for a in re.split(r'[ \t]+', deplist) if a.strip() != '']

if not deplist:
    echo "No dependencies to fetch."

for dep in deplist:
    try:
        ($url, $ref) = dep.split('@')
    except:
        echo f"Unable to parse dependency specification: {dep}, please use this format: <clone_url>@<ref>"
        exit(1)
    $clonedir = $url.split('/')[-1]
    if $clonedir.endswith('.git'):
        $clonedir = $clonedir[0:-4]
    
    echo "Cloning dependency: $url"
    git clone -q --recurse-submodules -b "$ref" "$url" "$clonedir"
    pushd "$clonedir" > /dev/null
    wdir = ".github/workflows"
    files = listdir(wdir)
    to_build = []
    for file in files:
        p = path.join(wdir, file)
        if path.isfile(p):
            y = yaml.safe_load(open(p))
            for job in y['jobs']:
                steps = y['jobs'][job].get('steps', {})
                isabelle_steps = [s for s in steps if s.get('uses', '').startswith("lexbailey/isabelle-theory-build-github-action@")]
                for s in isabelle_steps:
                    args = s.get('with', {})
                    dep_build_ver = s.get('uses').split('@')[-1]
                    dep_isa_ver = args.get('isabelle-version', 'UNKOWN_VERSION')
                    dep_session = args.get('session-name', $clonedir)
                    dep_root = args.get('theory-root', '')
                    dep_deps = args.get('depends', '')
                    if dep_isa_ver != isa_ver:
                        continue
                    if dep_build_ver != build_ver:
                        echo f"::warning file={$url}:{p}::Dependency is normally built using a different version of lexbailey/isabelle-theory-build-github-action"
        to_build.append([dep_root, dep_session, dep_deps])
    popd > /dev/null
    for $dep_root, $dep_session, $dep_deps in to_build:
        echo "Building depndency: $dep_session"
        $ARG0 $ARG1 $dep_root $dep_session $dep_deps '' --projname=$clonedir
        echo "Finished building depndency: $dep_session"


echo "Adding project sources..."
echo ln -s "$GITHUB_WORKSPACE/$projdir" "$isa_base/src/$projname"
ln -s "$GITHUB_WORKSPACE/$projdir" "$isa_base/src/$projname"
pushd "$isa_base" > /dev/null

rootlist = [a for a in re.split(r'[ \t]+', $rootdir) if a.strip() != '']
for $rootdir in rootlist:
    echo "Adding root: src/$projname/$rootdir"
    echo "src/$projname/$rootdir" >> ROOTS
final_result = 2
try:
    sessions = [a for a in re.split(r'[ \t]+', $session) if a.strip() != '']
    if not sessions:
        echo "::error::No sesssions were build, check your session-name input lists some sessions to build."
        final_result = 1
    else:
        for $session in sessions:
            echo "building with: isabelle build -b \"$session\""
            ./bin/isabelle build -b "$session"
            final_result = 0
except Exception as e:
    echo f"::error::Build failed: {str(e)}"
    final_result = 1
popd > /dev/null

if $report_url != '':
    yamltext = 'todo'
    
    $topost=json.dumps({
        'reponame':$GITHUB_REPOSITORY,
        'datetime':datetime.now().isoformat(),
        'result':str(final_result),
        'config':yamltext,
    })
    
    printf "%s" $topost | signed_post.py $report_url $report_secret

exit(final_result)
