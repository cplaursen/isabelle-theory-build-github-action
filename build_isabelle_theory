#!/usr/bin/env xonsh

$RAISE_SUBPROC_ERROR = True

import argparse
import yaml
import re
from os import listdir
from os import path


p = argparse.ArgumentParser()
p.add_argument('isabelle_version')
p.add_argument('root_dir')
p.add_argument('session_name')
p.add_argument('dependencies')
p.add_argument('--projname')
a = p.parse_args()

thisprog = $ARG0
$projname = $(basename $(pwd)).strip()
if a.projname:
    $projname = a.projname
isa_ver = a.isabelle_version
$rootdir = a.root_dir
$session = a.session_name
deplist = a.dependencies
build_ver = path.split($GITHUB_ACTION_PATH[0])[-1]
    

if $session == "":
    $session = $projname

if isa_ver == "2021-1":
    if not path.isdir('Isabelle2021-1'):
        echo "Fetching Isabelle:"
        wget -nv -O - https://isabelle.in.tum.de/dist/Isabelle2021-1_linux.tar.gz | tar -xzf -
    pushd Isabelle2021-1 > /dev/null
    $isa_base=$(pwd).strip()
    popd > /dev/null
else:
    echo f"Unknown Isabelle version `{isa_ver}`."
    exit(1)

echo "Checking for dependencies..."
deplist = [a for a in re.split(r'[ \t]+', deplist) if a.strip() != '']

if not deplist:
    echo "No dependencies to fetch."

for dep in deplist:
    try:
        ($url, $ref) = dep.split('@')
    except:
        echo f"Unable to parse dependency specification: {dep}, please use this format: <clone_url>@<ref>"
        exit(1)
    $clonedir = $url.split('/')[-1]
    if $clonedir.endswith('.git'):
        $clonedir = $clonedir[0:-4]
    
    echo "Cloning dependency: $url"
    git clone -q --recurse-submodules -b "$ref" "$url" "$clonedir"
    pushd "$clonedir" > /dev/null
    wdir = ".github/workflows"
    files = listdir(wdir)
    to_build = []
    for file in files:
        p = path.join(wdir, file)
        if path.isfile(p):
            y = yaml.safe_load(open(p))
            for job in y['jobs']:
                steps = y['jobs'][job].get('steps', {})
                isabelle_steps = [s for s in steps if s.get('uses', '').startswith("lexbailey/isabelle-theory-build-github-action@")]
                for s in isabelle_steps:
                    args = s.get('with', {})
                    dep_build_ver = s.get('uses').split('@')[-1]
                    dep_isa_ver = args.get('isabelle-version', 'UNKOWN_VERSION')
                    dep_session = args.get('session-name', $clonedir)
                    dep_root = path.join($clonedir, args.get('theory-root', ''))
                    dep_deps = args.get('depends', '')
                    if dep_isa_ver != isa_ver:
                        echo f"::warning file={$url}:{p}::Dependency is normally built using a different isabelle version."
                    if dep_build_ver != build_ver:
                        echo f"::warning file={$url}:{p}::Dependency is normally built using a different version of lexbailey/isabelle-theory-build-github-action"
        to_build.append([dep_root, dep_session, dep_deps])
    popd > /dev/null
    for $dep_root, $dep_session, $dep_deps in to_build:
        echo "Building depndency: $dep_session"
        $ARG0 $ARG1 $dep_root $dep_session $dep_deps --projname=$clonedir
        echo "Finished building depndency: $dep_session"


echo "Adding project sources..."
ln -s "$GITHUB_WORKSPACE/$rootdir" "$isa_base/src/$projname"
pushd "$isa_base" > /dev/null
echo "Adding root: src/$projname"
echo "src/$projname" >> ROOTS
echo "building with: isabelle build -b \"$session\""
try:
    ./bin/isabelle build -b "$session"
except Exception as e:
    echo f"::error::Build failed: {str(e)}"
    exit(1)
popd > /dev/null

